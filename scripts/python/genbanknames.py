#! /usr/bin/env python

# retrieve scientific names given genbank accession numbers
# should do 'import set from Set as set' (not sure about caps) to work with earlier versions of python,
# although that unique ID business is optional -- can just search and Entrez will return only unique ones
# see the comment below about what is needed to associate
                          
# version 1.1
# for help on curl format, see the eutils help here:
# http://www.ncbi.nlm.nih.gov/entrez/query/static/esummary_help.html#DisplayNumbers

import os 
import re
                     
sentence = "--------------------- "
returnfasta=0                
                                                                
query1="AY823227,DQ065853,BV726572"    
query3="AAA27721,AAN41637,CAA58790"                                                              

# this example is protein -- query1 is nucleotide, and the DB name should be change below for NT
#query="AAA27721,AAN41637,CAA58790,CAA58789,AAK02059,AAL33917,AAL33916,AAR85352,AAY40168,AAR85350,AAR85351,ABO61190,AAP55761,AAQ11989,AAQ11988,AAF03371,ABB17963,AAU04450,AAG16224,AAQ11987,AAU04443,AAN05449,AAO00732,AAS18272,ABB17954,ABB17965,AAF03372,AAL23574,AAO49327,AAT77753,AAU06852,AAF03373,ABB17952,ABB17966,AAG02385,ABQ58831,AAG41206,ABQ58832,AAQ01183,AAQ01184,AAQ01188,AAQ01185,AAQ01186,AAQ01187,AAR85349,ABB17953,AAU06857,ABB17961,ABB17971,AAS18270,AAS18271,ABB17958,AAK71331,AAK71341,ABB17970,AAF03370,AAU04445,ABB17957,BAD24720,BAD24721,AAK71342,AAO16871,AAS19276,AAM10626,AAG41205,AAN52735,ABQ58830,AAK71333,AAK71337,AAL27542,AAK71343,AAL27537,AAL27541,AAL27538,AAF03374,ABB17962,BAD52002,BAD52001,ABC68475,AAK71334,AAK97633,AAU04446,AAO61599,ABS87210,BAD72874,AAK71332,AAM10625,AAK71336,AAO61598,AAQ90465,ABB17956,ABB17968,ABN41776,ABB17969,BAD95669,BAD95670,AAK62982,AAO61603,AAL17905,AAO61602,ABS87206,ABS87207" 
GFPhmmquery="EY025628,EY025755,EY022783,EY022790,EY025255,EY022942,EY022070,EY022238,DY584360,DY578187,DY585404,DY585028,DY584160,DY584884,DY584340,DY584671,DY584617,DY584530,DY584349,DY584910,DY584839,DY578957,DY578342,DY585234,DY584979,DY584111,DY585327,DY584613,DY585192,DY584038,DY585118,DY585436,DY584698,DY584358,DY584010,DY584044,EY025119,EY022801,EY022974,DY579247,DY577745,EY022793,EY022376,DY584600,EY022315,DY585127,DY585447,DY585435,DY577961,DY578822,EY022157,EY021888,EY025627,EY022314,DY578780,DY580559,DY584885,DY585220,EY022953,EY022375,DY577621,EY022680,DY584378,DY577543,EY022359,DY585441,DY585615,DY585202,EY022458,DY577802,DY585185,EY025754,EY022197,EY022854,EY025577,DY585267,DR987866,DR987865,DR987866,DR987865,EY025576,EY025640,EY022094,EY022358,EY022093,EY025118,EY022988,EY022965,EY022725,DY577538,DY584431,EY022797,EY022457,EY022196,DY584343,EY022156,DY579914,EY021887,EY022634,EY022633,EY021952,EY025280,EY021951,EY022009,EY022008,DY577795,DY584114,DY585763,DY586878,EY022935,EY022870,EY022069,DY580374,EY022723,FE586258,FE554634,EY022702,BW736869,BW736869,FE577750,FE582051,FE555193,BI387917,FE588346,FE579807,BW894392,BW894392,FE582463,BW895120,BW895120,BW894220,BW894220,FE558493,FE577690,FE581076,FE593492,FE579376,BW893733,BW893733,FE550749,BI385436,FE592213,FE560124,FE543652,FE580325,FE542485,FE548518,BW895193,BW895193,FE586682,FE569508,BW895676,BW895676,FE584344,BW781538,BW781538,FE587927,FE595984,FE555188,BW894938,BW894938,FE552513,FE560488,FE541901,BW781996,BW781996,FE541937,FE543220,FE546045,BW747792,BW747792,FE578896,FE576079,FE540836,FE548341,FE553100,FE545291,FE553822,FE550732,FE559112,FE558907,FE575534,FE557165,FE580400,FE540436,FE550531,FE547039,BW895037,BW895037,FE579624,FE596052,FE587134,FE587233,FE551648,FE591600,FE544024,BW895094,BW895094,BI379468,FE548537,FE553939,BW896189,BW895839,BW896189,BW895839,FE559120,FE591710,FE596747,FE547907,FE551861,FE592689,FE555028,FE559711,FE544745,BW896246,BW896246,FE543034,FE578869,FE576852,FE548193,FE546915,BW741633,BW741633,FE577635,FE542781,FE589903,FE548285,FE553410,BW734078,BW734078,BW893865,BW893865,FE549476,FE543366,FE593893,FE587883,BW733673,BW733673,FE577040,FE580627,BW736108,BW736108,FE555260,BW736374,BW736374,DY581632,DY586977,FE585010,BW881040,BW881040,BW738638,BW738638,BI386699,BW870345,BW870345,BW733551,BW733551,BW798018,BW740938,BW740938,BW798018,BW881726,BW872238,BW881726,BW872238,BI382638,BW744973,BW744973,BW883955,BW883955,BW731527,BW731527,BW871203,BW871203,BW845436,BW845436,BW732644,BW732644,BW871289,BW871289,BW870882,BW870882,FE593682,FE560942,BW738834,BW738834,BI386976,BW865453,BW865453,BI382442,BW870263,BW871349,BW871349,BW870263,BW781181,BW781181,BW732364,BW732364,BW731470,BW731470,BI384961,FE544265,BW845326,BW845326,BW847953,BW847953,BI381780,BW739533,BW739533,BW736021,BW736021,BW731780,BW731780,BW736068,BW736068,BW735987,BW735987,BW883603,BW883603,FE585625,BI380055,BW702444,BW702444,BW844658,BW844658,BW735345,BW735345,BW775144,BW775144,BW734710,BW734710,BW848201,BW773308,BW848201,BW773308,BW848533,BW848533,BW738465,BW738465,DY577551,BW845319,BW845319,BW847213,BW847213,BW776690,BW776690,BW865342,BW865342,BW703757,BW703757,DY585683,BW877344,BW748583,BW748583,BW877344,BW733798,BW733798,BW735427,BW735427,BW732432,BW732432,BW846649,BW846649,BW777443,BW777443,BW732679,BW732679,BW844566,BW844566,BW735559,BW735559,BW886436,BW886436,BW846288,BW846288,BW871841,BW871841,BW844350,BW844350,BW871722,BW871722,BW845019,BW845019,BW848139,BW848139,BW735971,BW735971,BW737302,BW737302,BW740806,BW740806,BW877356,BW877356,BW878058,BW878058,BW846774,BW846774,BW875316,BW875316,BW802012,BW802012,BW874571,BW874571,BW737071,BW737071,BW871129,BW871129,BW882730,BW882730,BW870996,BW870996,FE591179,BW736197,BW736197,BW884171,BW884171,BW741675,BW741675,BW871668,BW812556,BW812556,BW871668,FE592717,BW774410,BW774410,BI387406,BW886467,BW886467,BW847265,BW847265,BW808285,BW808285,BW885290,BW885290,BW846282,BW846282,DY587557,BW893356,BW893356,BW865491,BW865491,DY587591,BW875607,BW875607,BW866209,BW866209,FE586257,BW826386,BW826386,BW830573,BW830573,BI382373,BI382999,BW845125,BW845125,BI376416,FE555932,BI380008,BW759391,BW759391,BW870834,BW870834,BW874530,BW874530,BW709527,BW709527,BW898916,BW898916,BW874149,BW874149,BW954902,BW954902,BI376444,BW741463,BW741463,BW740063,BW740063,BW868297,BW868297,BW841713,BW841713,BW755569,BW755569,BW752035,BW752035,BW740055,BW740055,BW954331,BW954331,FE555891,BW798383,BW798383,BW794071,BW794071,BW953567,BW953567,BW879355,BW815768,BW802120,BW854305,BW815768,BW854305,BW802120,BW879355,BW847647,BW847513,BW847647,BW888639,BW847513,BW888639,BW845059,BW845059,BW816021,BW816021,BW767115,BW767115,BW954499,BW954499,BW954861,BW954861,BW872925,BW872925,BW877811,BW877811,BW728440,BW728440,BI379061,BW845746,BW882572,BW845746,BW882572,BW852839,BW852839,BW777441,BW777441,BW953727,BW953727,BW757813,BW757813,BW865254,BW865254,BW883214,BW883214,BW874259,BW874259,BW843023,BW843023,BW870540,BW870540,BW850864,BW850864,BW889791,BW889791,BW879531,BW879531,BW863814,BW863814,BW878088,BW878088,BW954918,BW954918,BW884230,BW884230,BW865437,BW865437,BI381719,EY025743,EY025744,BW951491,BW951491,BW847334,BW847334,BW840567,BW840567,FE565650,BW878253,BW878253,BW815894,BW815894,BI376909,BI386955,BI380627,BW879234,BW852174,BW852174,BW879234,BI381765,BW803189,BW884779,BW884779,BW803189,BW826360,BW826360,FE594923,BW839572,BW839572,BI388504,BW898546,BW898546,BW743625,BW743625,"
query="EY025628,EY025755,EY022783,EY022790"
# query="DW275470,DW257247,DW269935,DW270458,DW280168,DW279390,DW276049,DW279925,DW286565,DW280904,DW269497,DW276356,DW257633,DW280135,DW276583,DW279237,DW263028,DW265164,DW264042,DW265797,DW263126,DW253254,DW263205,DW270236,DW267290,DW255320,DW252031,DW279142,DW270419,DW285407,DW276402,DW255100,DW269986,DW262316,DW278501,DW258728,DW278447,DW263517,DW263933,DW268335,DW280526,DW270261,DW276905,DW269145,DW257930,DW280539,DW257876,DW270441,DW271824,DW265359,DW261982,DW279579,DW275774,DW276105,DW272476,DW271568,DW276697,DW276947,DW269625,DW280546,DW270198,DW280104,DW275862,DW261815,DW281420,DW280622,DW281173,DW280290,DW275587,DW275259,DW276326,DW269263,DW265270,DW276032,DW280236,DW275615,DW269856,DW257793,DW279409,DW275392,DW280630,DW269466,DW279954,DW261807,DW257569,DW270782,DW275562,DW257470,DW275803,DW264066,DW279280,DW261775,DW275553,DW264009,DW262649,DW269973,DW280226,DW258214,DW270276,DW255368,DW254344,DW257880,DW275567,DW280577,DW278110,DW281388,DW275437,DW275580,DW275054,DW281330,DW275682,DW277569,DW282737,DW276343,DW270746,DW281380,DW281374,DW270009,DW280189,DW280385,DW275370,DW269095,DW279933,DW280002,DW275020,DW281191,DW270766,DW257337,DW276309,DW280636,DW269054,DW281270,DW280933,DW264242,DW281362,DW269641,DW278182,DW269619,DW269627,DW280430,DW257626,DW254882,DW276586,DW274745,DW257095,DW279173,DW275105,DW262143,DW276517,DW275320,DW280582,DW276558,DW276553,DW276458,DW276425,DW276122,DW275667,DW276042,DW275872,DW281294,DW279944,DW263306,DW284214,DW269536,DW270760,DW280717,DW260641,DW269543,DW269483,DW279859,DW261808,DW281489,DW280482,DW257188,DW276954,DW252335,DW263249,DW257648,DW257791,DW257750,DW257443,DW279490,DW279812,DW275035,DW280638,DW272676,DW279149,DW255120,DW269922,DW257007,DW279797,DW285024,DW273843,DW257627,DW257268,DW257494,DW257256,DW276327,DW279843,DW277047,DW269330,DW286066,DW275025,DW279755,DW280754,DW257611,DW281325,DW279281,DW270620,DW271985,DW269156,DW280167,DW275246,DW280877,DW281512,DW262846,DW280515,DW259374,DW266319,DW256400,DW257505,DW275989,DW286623,DW268895,DW273980,DW259463,DW279865,DW269295,DW261886,DW284858,DW279712,DW285624,DW282435,DW259555,DW276916,DW283856,DW252237,DW259446,DW261484,DW275080,DW269038,DW251994,DW275317,DW267217,DW257329,DW280449,DW269234,DW275155,DW280719,DW275540,DW276444,DW270484,DW260490,DW281296,DW257963,DW285983,DW276746,DW269981,DW269802,DW269659,DW283356,DW270159,DW261782,DW270339,DW280744,DW279334,DW280872,DW261635,DW263311,DW260301,DW275986,DW270015,DW276473,DW269903,DW276515,DW275530,DW281288,DW280939,DW281167,DW280594,DW269030,DW276644,DW280862,DW275833,DW279615,DW261553,DW281009,DW263023,DW276713,DW280533,DW279813,DW251345,DW269084,DW276931,DW275435,DW275431,DW269589,DW262932,DW270109,DW269159,DW262478,DW262457,DW280381,DW273553,DW279022,DW279692,DW279129,DW269407,DW257316,DW270053,DW280935,DW263174,DW269457,DW280216,DW281300,DW269060,DW269972,DW275324,DW275788,DW257161,DW270366,DW279282,DW263208,DW262895,DW279715,DW263363,DW276724,DW275802,DW269384,DW279449,DW260837,DW276159,DW269314,DW279035,DW280943,DW275538,DW276038,DW269992,DW280220,DW270260,DW263411,DW263113,DW275409,DW275159,DW279614,DW270177,DW281176,DW269035,DW257886,DW279186,DW270583,DW281392,DW280193,DW269202,DW281212,DW257662,DW281217,DW275442,DW270251,DW270248,DW270171,DW275922,DW270153,DW276024,DW270126,DW280831,DW270278,DW270038,DW276132,DW280775,DW270025,DW281302,DW269956,DW270402,DW269928,DW281267,DW261693,DW257024,DW276683,DW281353,DW269579,DW277003,DW269570,DW281207,DW279077,DW279158,DW275310,DW269344,DW269252,DW279398,DW253662,DW252443,DW279654,DW275052,DW279737,DW251386,DW279756,DW262943,DW275002,DW281010,DW279847,DW251326,DW251303,DW281564,DW264078,DW263097,DW263326,DW280997,DW264952,DW257557,DW257101,DW261157,DW258782,DW279937,DW269521,DW284703,DW256746,DW283144,DW264512,DW262631,DW267257,DW285376,DW274793,DW280879,DW280947,DW270796,DW279462,DW277232,DW267020,DW269850,DW269727,DW267857,DW269408,DW269482,DW269430,DW279950,DW279566,DW280010,DW264098,DW269704,DW269806,DW279766,DW269422,DW275768,DW263940,DW275443,DW270675,DW276896,DW284032,DW280743,DW280351,DW276882,DW283574,DW257499,DW270257,DW279951,DW280509,DW272570,DW280417,DW279876,DW276264,DW279935,DW276362,DW280468,"
##################               
###
###   change the database name here 
###
#################

mydatabase="protein"  

mydatabase="nucleotide"
    
retmax=query.count(',')+1

# should phrase these so it handles multiple lines from the result... 
 
# can do as a comma-delimited list so as not to arouse GENBANK suspicions, 
# but TID will only return one result even when you have two queries that are the same 
#   
# alternative is to keep each one separate, use a for loop, or to store the TID and associated GI together by
# parsing the GI query, then look up the corresponding taxon by name 
# this would require removing the grep at the end of the curl statements and doing it in the program
# which would be not all bad...

                        
# first: retrieve GI from Genbank ID number for each identifier
# don't forget the "r" at the end     
                         

if returnfasta:
	#  for fasta
	retcurl='curl -s "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?tool=quicktest&db='+mydatabase+"&retmax="+str(retmax)+'&retmode=text&rettype=fasta&id='+ query +'"'
	stdout_handle = os.popen(retcurl,'r')
	temphold=stdout_handle.read()
	print temphold
else:
	print "# Running "+str(retmax)+" queries against "+mydatabase+" database...\n# This may take a few seconds"   
	curlstring="curl -s 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?&db="+mydatabase+"&retmax="+str(retmax)+"&term=" + query + "' | grep 'Id\>'"

#	print curlstring
	print sentence

	stdout_handle = os.popen(curlstring, "r")  

	temphold=stdout_handle.read()

	# output should come as:		<Id>72256905</Id>  
	# print  "curlresult" + temphold
	idregexp = re.compile(r'>(\d+)</')  

	GIlist = idregexp.findall(temphold) 

	if GIlist:
		GItext = ','.join(GIlist) 
		print "List of "+str(len(GIlist))+" GI numbers:"
		print GItext
	else:     
		print "Not found"
		exit(1)

	print sentence 
          

	# index one: retrieve taxonid from GI records  
	# to retrieve fasta, use this efetch command instead    

	# use for taxa
	retcurl='curl -s "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?tool=quicktest&db='+mydatabase+'&id='+ GItext + '" | grep TaxI '

	stdout_handle = os.popen(retcurl,'r')
	temphold=stdout_handle.read()
	# print temphold
	# output should come as:	   <Item Name="TaxId" Type="Integer">44298</Item>  
	TIlist = idregexp.findall(temphold) 
	UniqueTIlist=set(TIlist)
	uniqueret=str(len(UniqueTIlist))

	if TIlist:
		print "List of "+ uniqueret +" unique Taxon IDs" + " from an original list of "+str(len(TIlist))+":" 
		TItext = ','.join(UniqueTIlist)
		print TItext
	print sentence 

	# <Item Name="TaxId" Type="Integer">44298</Item> 
	# don't need the specifiers because only this line will come back after the grep atatement

	# index one: retried taxonid from GI

	stdout_handle = os.popen('curl -s "http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=taxonomy&retmax=' + uniqueret +'\&id=' + TItext + '" | grep ScientificName ','r')
	temphold=stdout_handle.read()  

	#print temphold

	nameregexp = re.compile(r'\>([\w\s]+)<\/')  

	Namelist = nameregexp.findall(temphold)  

	# print temphold
	# can pick from the following list... currently just takes scientific name


	# <?xml version="1.0"?>
	# <!DOCTYPE eSummaryResult PUBLIC "-//NLM//DTD eSummaryResult, 29 October 2004//EN" "http://www.ncbi.nlm.nih.gov/entrez/query/DTD/eSummary_041029.dtd">
	# <eSummaryResult>
	# <DocSum>
	# 	<Id>44298</Id>
	# 	<Item Name="Rank" Type="String">species</Item>
	# 	<Item Name="Division" Type="String">coral anemones</Item>
	# 	<Item Name="ScientificName" Type="String">Corynactis californica</Item>
	# 	<Item Name="CommonName" Type="String"></Item>
	# 	<Item Name="TaxId" Type="Integer">44298</Item>
	# 	<Item Name="NucNumber" Type="Integer">12</Item>
	# 	<Item Name="ProtNumber" Type="Integer">6</Item>
	# 	<Item Name="StructNumber" Type="Integer">0</Item>
	# 	<Item Name="GenNumber" Type="Integer">0</Item>
	# 	<Item Name="GeneNumber" Type="Integer">0</Item>
	# 	<Item Name="Genus" Type="String"></Item>
	# 	<Item Name="Species" Type="String"></Item>
	# 	<Item Name="Subsp" Type="String"></Item>
	# </DocSum>
	# 
	# </eSummaryResult> 


	if Namelist:
		print "List of "+ str(len(Namelist))+" scientific names:"
		print Namelist
	print sentence